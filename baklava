#!/bin/sh

# wip
# Caps_Lock key is now ISO_Level3_Shift
# see example on H key, it can do 6 levels now.
# it works with matlab but not so much with xmonad.
# note the Shift-Tab-J generates one "4" but then goes dead
# not sure if this bug is related to this wip
# we could test it with the previous kb...
# did the test, and failed to reproduce the bug in either
#
# BONUS! this seems fine to work with matlab -- Caps_Lock when tapped makes enter, and also works as a modifier, unlike ';'



case "$1" in
    stop) stop=1 ;;
    start) stop=1 ; start=1 ;;
    restart) stop=1 ; start=1 ;;
    help) help=1 ;;
    *) help=1 ; stop=1 ;;
esac

if [ -n "$stop"  ] ; then
   pkill -x xcape  # don't have multiple xcape running!
   setxkbmap -layout 'us(intl)' # RESET for clean slate!!
fi

if [ -n "$start" ] ; then


xkbset -bell -feedback sticky -twokey latchlock
xkbset exp 64 '=sticky' '=twokey' '=latchlock'
###xkbset ignorelock control


xmodmap - <<hereDoc

! ! !        unmodified   shift      Symbol      Shift-Symbol     Movement    Shift-Movement
! ! !        lowercase    uppercase  printable   function-keys    movement    numbers
! !_!        ----------   ---------  ---------   -------------    --------    --------------
keycode 23 = Tab          BackTab    asciitilde
keycode 24 = q            Q      
keycode 25 = w            W      
keycode 26 = e            E      
keycode 27 = r            R      
keycode 28 = t            T      
keycode 29 = y            Y          ampersand   NoSymbol         NoSymbol    0
keycode 30 = u            U          NoSymbol    F1               NoSymbol    1
keycode 31 = i            I          asterisk    F2               Home        2
keycode 32 = o            O          asciitilde  F3               End         3
keycode 33 = p            P          plus        F10              Insert
keycode 34 = bracketleft  braceleft  parenleft   F11              Delete
keycode 35 = bracketright braceright parenright  F12
keycode 38 = a            A
keycode 39 = s            S
keycode 40 = d            D
keycode 41 = f            F
keycode 42 = g            G
keycode 43 = h            H          asciicircum F5               Left
keycode 44 = j            J          at          F4               Down        4
keycode 45 = k            K          equal       F5               Up          5
keycode 46 = l            L          bar         F6               Right       6
keycode 48 = apostrophe   quotedbl   grave
keycode 50 = Shift_L      Shift_L
keycode 52 = z            Z
keycode 53 = x            X
keycode 54 = c            C
keycode 55 = v            V
keycode 56 = b            B
keycode 57 = n            N          numbersign  NoSymbol         Prior
keycode 58 = m            M          dollar      F7               Next        7
keycode 59 = comma        less       asciicircum F8               NoSymbol    8
keycode 60 = period       greater    exclam      F9               NoSymbol    9
keycode 61 = slash        question   backslash
keycode 62 = Shift_R      Shift_R
keycode 64 = Control_L
keycode 65 = space        underscore minus
keycode 66 = Alt_L
keycode 108 = Control_R
!keycode 68 = F2          XF86Switch_VT_2
keycode 8 = Tab           NoSymbol   Tab
keycode 47 = semicolon    colon      percent     NoSymbol         BackSpace

remove lock = Caps_Lock
hereDoc

anykey=255
tapifier() {
    ### this is inspired by the example in man xcape : but it assumes
    modkeysym=$1
    keycode=$2
    modifier=$3
    tapkeysym=$4
    extrakeysyms=$5
    synonymkeycodes=$6

for code in $keycode $synonymkeycodes
do
    xmodmap -e "keycode $code = $modkeysym" || printf "\nerror: tapifier %s\nat step: keycode %s = %s" "$*" "$code" "$modkeysym"

    # rather than being surgical, just try to remove all the modifiers from modkeysym, and ignore the fails
    for mod in shift lock control mod1 mod2 mod3 mod4 mod5 ; do
       xmodmap -e "remove $mod = $modkeysym" 2> /dev/null
    done
    if [ "$modifier" != "" ]
    then
        xmodmap -e "add $modifier = $modkeysym" || printf "\nerror: tapifier %s\nat step: add %s = %s" "$*" "$modifier" "$modkeysym"
    fi

    xmodmap -e "keycode $anykey = $tapkeysym $extrakeysyms"|| printf "\nerror: tapifier %s\nat step: keycode any = %s %s " "$*" "$tapkeysym" "$extrakeysyms"
done
    xcape -e "${modkeysym}=${tapkeysym}"
    anykey=$(( anykey -1 ))
}

tapifier Mode_switch 23 '' Tab 'BackTab'  ### '' is because Mode_switch is a special keysym, not a modifier


### tapifier Hyper_R 61 Shift slash 'question backslash'
### tapifier Shift_L 50 Shift Escape
# physical Shift_R still works as plain shift without next line
# tapifier Shift_R 62 Shift BackSpace
# this allows use of Shiht_R for tilde key
tapifier Shift_R 49 Shift grave asciitilde

### temporary experimental
### i do not use any layer very much, except the symbol layer
### tapifier ISO_Level3_Shift 66 mod5 Return
fi

xmodmap -e "clear control"
xmodmap -e "clear mod1"
xmodmap -e "keycode 64 = Control_L"
xmodmap -e "keycode 108 = Control_R"
xmodmap -e "add control = Control_L Control_R"
xmodmap -e "add mod1 = Alt_L"

tapifier Control_L 64 control Return 108

if [ -n "$help" ] ; then
echo '
usage:
   baklava start # start baklava silently
   baklava restart # stop baklava silently & then start baklava silently
   baklava stop # stop baklava silently
   baklava help # print this message
   baklava # stop baklava, as failsafe if your keyboard is crazy & print help message
' >&2
fi


